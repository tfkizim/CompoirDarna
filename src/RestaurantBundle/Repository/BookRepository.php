<?php

namespace RestaurantBundle\Repository;
use Symfony\Component\Validator\Constraints\DateTime;

/**
 * BookRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookRepository extends \Doctrine\ORM\EntityRepository
{
	public function SearchByDate($date)
    {
        $tomorrow=new \DateTime($date->format("Y-m-d")." 05:00:00");
        $tomorrow->add(new \DateInterval('P1D'));
        $qb= $this->getEntityManager()->createQuery('
            SELECT b
            FROM RestaurantBundle\Entity\Book b,RestaurantBundle\Entity\State s
            WHERE b.stateId=s.id and b.stateId != 5 and b.dateBook BETWEEN :today and :tomorrow
            ORDER BY b.dateSys,s.orderInFilter asc,b.dateBook asc
            ')
            ->setParameter('today', $date->format("Y-m-d")." 05:00:00")
            ->setParameter('tomorrow', $tomorrow->format("Y-m-d H:i:s"));

        return $qb->getResult();
    }
    public function SearchByDateServiceAdmin($date,$service){
        $tomorrow=new \DateTime($date->format("Y-m-d")." 05:00:00");
        $tomorrow->add(new \DateInterval('P1D'));
        $servicewhere="";
        if($service>0){
            $servicewhere.=' and b.serviceId = :service';
        }
        $qb= $this->getEntityManager()->createQuery('
            SELECT b
            FROM RestaurantBundle\Entity\Book b,RestaurantBundle\Entity\State s
            WHERE b.stateId=s.id'.$servicewhere.' and b.stateId!=:stateid1 and b.dateBook BETWEEN :today and :tomorrow
            ORDER BY b.dateSys,s.orderInFilter asc,b.dateBook asc
            ')
            ->setParameter('stateid1', "9")
            ->setParameter('today', $date->format("Y-m-d")." 05:00:00")
            ->setParameter('tomorrow', $tomorrow->format("Y-m-d H:i:s"));
        if($service>0){
            $qb->setParameter('service', $service);
        }
        return $qb->getResult();
    }
    public function SearchByDateServiceSuperAdmin($date,$service){
        $tomorrow=new \DateTime($date->format("Y-m-d")." 05:00:00");
        $tomorrow->add(new \DateInterval('P1D'));
        $servicewhere="";
        if($service>0){
            $servicewhere.=' and b.serviceId = :service';
        }
        $qb= $this->getEntityManager()->createQuery('
            SELECT b
            FROM RestaurantBundle\Entity\Book b,RestaurantBundle\Entity\State s
            WHERE b.stateId=s.id'.$servicewhere.' and b.dateBook BETWEEN :today and :tomorrow
            ORDER BY b.dateSys,s.orderInFilter asc,b.dateBook asc
            ')
            ->setParameter('today', $date->format("Y-m-d")." 05:00:00")
            ->setParameter('tomorrow', $tomorrow->format("Y-m-d H:i:s"));
        if($service>0){
            $qb->setParameter('service', $service);
        }
        return $qb->getResult();
    }
    public function SearchByDateService($date,$service){
        $tomorrow=new \DateTime($date->format("Y-m-d")." 05:00:00");
        $tomorrow->add(new \DateInterval('P1D'));
        $servicewhere="";
        if($service>0){
            $servicewhere.=' and b.serviceId = :service';
        }
        $qb= $this->getEntityManager()->createQuery('
            SELECT b
            FROM RestaurantBundle\Entity\Book b,RestaurantBundle\Entity\State s
            WHERE b.stateId=s.id'.$servicewhere.' and b.dateBook BETWEEN :today and :tomorrow
            ORDER BY s.orderInFilter asc,b.dateBook asc
            ')
            ->setParameter('today', $date->format("Y-m-d")." 05:00:00")
            ->setParameter('tomorrow', $tomorrow->format("Y-m-d H:i:s"));
        if($service>0){
            $qb->setParameter('service', $service);
        }
        return $qb->getResult();
    }
    public function CountDateService($date,$service){
        $tomorrow=new \DateTime($date->format("Y-m-d")." 05:00:00");
        $tomorrow->add(new \DateInterval('P1D'));
        $servicewhere="";
        if($service>0){
            $servicewhere.=' and b.serviceId = :service';
        }
        $qb= $this->getEntityManager()->createQuery('
            SELECT sum(b.pax) as nbrpax
            FROM RestaurantBundle\Entity\Book b,RestaurantBundle\Entity\State s
            WHERE b.stateId=s.id and b.stateId != 5'.$servicewhere.' and b.dateBook BETWEEN :today and :tomorrow
            ORDER BY s.orderInFilter asc,b.dateBook asc
            ')
            ->setParameter('today', $date->format("Y-m-d")." 05:00:00")
            ->setParameter('tomorrow', $tomorrow->format("Y-m-d H:i:s"));
        if($service>0){
            $qb->setParameter('service', $service);
        }
        return $qb->getOneOrNullResult();
    }
    public function CountDateServiceAdmin($date,$service){
        $tomorrow=new \DateTime($date->format("Y-m-d")." 05:00:00");
        $tomorrow->add(new \DateInterval('P1D'));
        $servicewhere="";
        if($service>0){
            $servicewhere.=' and b.serviceId = :service';
        }
        $qb= $this->getEntityManager()->createQuery('
            SELECT sum(b.pax) as nbrpax
            FROM RestaurantBundle\Entity\Book b,RestaurantBundle\Entity\State s
            WHERE b.stateId=s.id and b.stateId != 5 and b.stateId != 9'.$servicewhere.' and b.dateBook BETWEEN :today and :tomorrow
            ORDER BY s.orderInFilter asc,b.dateBook asc
            ')
            ->setParameter('today', $date->format("Y-m-d")." 05:00:00")
            ->setParameter('tomorrow', $tomorrow->format("Y-m-d H:i:s"));
        if($service>0){
            $qb->setParameter('service', $service);
        }
        return $qb->getOneOrNullResult();
    }
    public function CountDateServiceSuperadmin($date,$service){
        $tomorrow=new \DateTime($date->format("Y-m-d")." 05:00:00");
        $tomorrow->add(new \DateInterval('P1D'));
        $servicewhere="";
        if($service>0){
            $servicewhere.=' and b.serviceId = :service';
        }
        $qb= $this->getEntityManager()->createQuery('
            SELECT sum(b.pax) as nbrpax
            FROM RestaurantBundle\Entity\Book b,RestaurantBundle\Entity\State s
            WHERE b.stateId=s.id and b.stateId != 5'.$servicewhere.' and b.dateBook BETWEEN :today and :tomorrow
            ORDER BY s.orderInFilter asc,b.dateBook asc
            ')
            ->setParameter('today', $date->format("Y-m-d")." 05:00:00")
            ->setParameter('tomorrow', $tomorrow->format("Y-m-d H:i:s"));
        if($service>0){
            $qb->setParameter('service', $service);
        }
        return $qb->getOneOrNullResult();
    }
    public function SearchByDateDetail($date,$id)
    {
        $tomorrow=new \DateTime($date->format("Y-m-d")." 05:00:00");
        $tomorrow->add(new \DateInterval('P1D'));
        $qb = $this->createQueryBuilder('u')  //add select and array for JSON
        ->where('u.stateId != 5')
            ->andWhere('u.dateBook BETWEEN :today and :tomorrow')
            ->andWhere('u.id != :id')
            ->addOrderBy('u.stateId','ASC')
            ->addOrderBy('u.dateBook','ASC')
            ->setParameter('today', $date->format("Y-m-d")." 05:00:00")
            ->setParameter('id', $id)
            ->setParameter('tomorrow', $tomorrow->format("Y-m-d H:i:s"));

        return $qb->getQuery()->getResult();
    }
    public function Calendar($datestart,$dateend){
        $today=new \DateTime();
        $onemonthafter=new \DateTime();
        $onemonthafter->add(new \DateInterval('P30D'));
        $qb = $this->createQueryBuilder('u')
            ->where('u.dateBook BETWEEN :datestart AND :dateend')
            ->setParameter('datestart', $datestart)
            ->setParameter('dateend', $dateend)
            ->andWhere('u.dateBook >= :datestart2')
            ->setParameter('datestart2', $today->format("Y-m-d")." 00:00:00")
            ->andWhere('u.dateBook <= :datestart3')
            ->setParameter('datestart3', $onemonthafter->format("Y-m-d")." 00:00:00");
        return $qb->getQuery()->getResult();
    }
}
